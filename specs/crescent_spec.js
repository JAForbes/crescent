// Generated by CoffeeScript 1.7.1
var db, specs, test, type, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

db = require('../port')();

_ = require('underscore');

test = {
  log: console.log
};

console.log = function() {};

type = function(actual) {
  return {}.toString.call(actual).slice(8, -1);
};

specs = {
  login: {
    'should deny access for invalid passwords': function() {
      var talk;
      talk = db('admin', 'invalid');
      return talk === 'Invalid username or password';
    },
    'should allow access for valid credentials': function() {
      var talk;
      talk = db('admin', 'password');
      return type(talk()) === 'Array';
    }
  },
  'an admin': {
    'can create tables': function() {
      var restoredList, tableList, testTable;
      testTable = 'new table';
      tableList = db('admin', 'password')(testTable)('..')();
      restoredList = db('admin', 'password')(testTable)(null)('..')();
      return __indexOf.call(tableList, testTable) >= 0 && __indexOf.call(restoredList, testTable) < 0;
    }
  }
};

(function() {
  var failed, nPassed, nTests, passed;
  passed = [];
  failed = [];
  _(specs).each(function(expectations, spec) {
    return _(expectations).each(function(expectation, title) {
      if (expectation()) {
        return passed.push([spec + ' ' + title]);
      } else {
        return failed.push([spec + ' ' + title]);
      }
    });
  });
  nPassed = passed.length;
  nTests = nPassed + failed.length;
  test.log("Passed " + nPassed + " out of " + nTests);
  return failed && _(failed).each(function(failure) {
    return test.log("FAIL: " + failure);
  });
})();
